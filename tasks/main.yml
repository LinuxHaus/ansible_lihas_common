---
- name: Mark role lihas_common done
  ansible.builtin.set_fact:
    role_done_lihas_common: true
  tags:
    - always
    - variables
- name: Mark lihas_common done
  ansible.builtin.set_fact:
    lihas_common_done: true
    cacheable: false
  tags:
    - always
    - variables
- name: Lihas_become init
  ansible.builtin.set_fact:
    lihas_become: false
  tags:
    - always
- name: Check if become is necessary
  ansible.builtin.set_fact:
    lihas_become: true
  when: ansible_effective_user_id != 0
  tags:
    - always
- name: "DEBUG: lihas_become"
  ansible.builtin.debug:
    var: lihas_become
    verbosity: 1
  tags:
    - always
- name: "DEBUG: ansible_effective_user_id"
  ansible.builtin.debug:
    var: ansible_effective_user_id
    verbosity: 1
  tags:
    - always
- name: Include variables
  ansible.builtin.import_role:
    name: lihas_variables
  when: configspaces is not defined
  tags:
    - always
    - variables
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: "Set default debconf locale to {{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
  ansible.builtin.debconf:
    name: locales
    question: locales/default_environment_locale
    value: "{{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
    vtype: select
  notify: Reconfigure locales
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set to generate debconf locales {{ locales_locales_to_be_generated | default(['de_DE.UTF-8', 'en_US.UTF-8']) }}"
  ansible.builtin.debconf:
    name: locales
    question: locales/locales_to_be_generated
    value: "{{ locales_locales_to_be_generated | default('de_DE.UTF-8 UTF-8, en_US.UTF-8 UTF-8') }}"
    vtype: multiselect
  notify: Reconfigure locales
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set tzdata area to {{ tzdata_areas | default('Europe') }}"
  ansible.builtin.debconf:
    name: tzdata
    question: "tzdata/Areas"
    vtype: select
    value: "{{ tzdata_areas | default('Europe') }}"
  notify: Reconfigure tzdata
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set tzdata zone to {{ tzdata_zones_europe | default('Berlin') }}"
  ansible.builtin.debconf:
    name: tzdata
    question: "tzdata/Zones/Europe"
    vtype: select
    value: "{{ tzdata_zones_europe | default('Berlin') }}"
  notify: Reconfigure tzdata
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"

- name: Collect network entries from LIHASVARS
  ansible.builtin.set_fact:
    network: "{{ network | default({}) | combine(LIHASVARS.network | default({}), recursive=true, list_merge='append_rp') }}"
  when: LIHASVARS.network is defined
  tags:
    - network
- name: Collect network entries from configspaces
  ansible.builtin.set_fact:
    network: "{{ network | default({}) | combine(hostvars[inventory_hostname][item]['config']['network'], recursive=true, list_merge='append_rp') }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['network'] is defined
  tags:
    - network
- name: DEBUG network after %.config.network
  ansible.builtin.debug:
    var: hostvars
    verbosity: 2
- name: Deploy /etc/network/interfaces
  ansible.builtin.template:
    src: etc/network/interfaces.j2
    dest: /etc/network/interfaces
    mode: "0644"
  when: network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  register: result
  tags:
    - network
  become: "{{ lihas_become }}"
- name: Protect /etc/network/interfaces on Proxmox/LXC
  ansible.builtin.file:
    path: /etc/network/.pve-ignore.interfaces
    state: touch
    access_time: preserve
    modification_time: preserve
    mode: "0644"
  when: ansible_virtualization_type == 'lxc' and network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  tags:
    - network
  become: "{{ lihas_become }}"
# /etc/hosts
- name: Add lines to /etc/hosts
  ansible.builtin.include_tasks: tasks/10-etc_hosts.yml
  loop: "{{ configspaces }}"
  loop_control:
    loop_var: configgroup
  when: configspaces is defined
- name: Remove 127.0.1.1 from /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: absent
    regexp: '^127\.0\.1\.1'
  become: "{{ lihas_become }}"
# repositories
- name: Remove obsolete /etc/apt/sources.list.d/lihas.list
  ansible.builtin.file:
    state: absent
    path: /etc/apt/sources.list.d/lihas.list
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact: # noqa: no-handler
    apt_update: true
  when: result.changed
- name: Enable buster-backports
  ansible.builtin.template:
    src: etc/apt/sources.list.d/buster-backports.list
    dest: /etc/apt/sources.list.d/buster-backports.list
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact: # noqa: no-handler
    apt_update: true
  when: result.changed
- name: Backports get lower preference
  ansible.builtin.copy:
    src: etc/apt/preferences.d/buster_backports.pref
    dest: /etc/apt/preferences.d/buster_backports.pref
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact: # noqa: no-handler
    apt_update: true
  when: result.changed
- name: Create /etc/apt/preferences.d
  ansible.builtin.file:
    state: directory
    path: /etc/apt/preferences.d
    mode: "0755"
  become: "{{ lihas_become }}"
- name: Fix potential previous errors by creating /var/lib/apt/lists
  ansible.builtin.file:
    path: "/var/lib/apt/lists"
    state: directory
    mode: "0755"
- name: Update apt cache
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
  block:
    - name: Run apt update
      ansible.builtin.apt:
        update_cache: true
  rescue:
    - name: Rescue apt update, rm /var/lib/apt/lists
      ansible.builtin.file:
        path: "/var/lib/apt/lists"
        state: absent
    - name: Rescue apt update, create /var/lib/apt/lists
      ansible.builtin.file:
        path: "/var/lib/apt/lists"
        state: directory
        mode: "0755"
    - name: Rescue apt update, run apt update
      ansible.builtin.apt:
        update_cache: true
- name: If wireguard is used, use from backports
  ansible.builtin.copy:
    src: etc/apt/preferences.d/wireguard.pref
    dest: /etc/apt/preferences.d/wireguard.pref
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact: # noqa: no-handler
    apt_update: true
  when: result.changed
- name: Apt update
  ansible.builtin.apt:
    update_cache: true
  when: apt_update | default(false)
  become: "{{ lihas_become }}"
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: Install software general
  ansible.builtin.apt:
    state: present
    name: ['aptitude', 'etckeeper', 'fail2ban', 'locales', 'needrestart', 'rsync', 'screen', 'tzdata', 'vim']
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
  tags:
    - software
- name: File etc/needrestart/conf.d/90-needrestart-lxc.conf
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: "0644"
  loop:
    - etc/needrestart/conf.d/90-needrestart-lxc.conf
  when: ansible_virtualization_type == 'lxc'
  become: "{{ lihas_become }}"
# include tasks/enable_extrepo.yml
- name: "Include tasks/enable_extrepo.yml"
  ansible.builtin.include_tasks: tasks/enable_extrepo.yml
  tags:
    - extrepo
- name: "Include enable_extra_apt_repositories.yml"
  ansible.builtin.include_tasks: tasks/enable_extra_apt_repositories.yml
  tags:
    - apt_repositories
- name: Apt update
  ansible.builtin.apt:
    update_cache: true
  when: apt_update | default (false)
  become: "{{ lihas_become }}"
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 600
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Include tasks/groups.yml"
  ansible.builtin.include_tasks: tasks/groups.yml
  tags:
    - groups
- name: "Include tasks/users.yml"
  ansible.builtin.include_tasks: tasks/users.yml
  tags:
    - users
- name: "Include lxc.yml"
  ansible.builtin.include_tasks: tasks/lxc.yml
  tags:
    - lxc
- name: "Include lihas-routes.yml"
  ansible.builtin.include_tasks: tasks/lihas-routes.yml
  tags:
    - routes
- name: "Include additional_software_repositories.yml"
  ansible.builtin.include_tasks: tasks/additional_software_repositories.yml
  tags:
    - software
- name: "Include additional_software.yml"
  ansible.builtin.include_tasks: tasks/additional_software.yml
  tags:
    - software
- name: "Include tasks/templates.yml"
  ansible.builtin.include_tasks: tasks/templates.yml
  tags:
    - templates
- name: "Include tasks/templatesperms.yml"
  ansible.builtin.include_tasks: tasks/templatesperms.yml
  tags:
    - templatesperms
- name: "Populate service facts"
  ansible.builtin.service_facts:

# ssh socket -> service
- name: "Disable ssh.socket with systemd"
  ansible.builtin.systemd_service:
    enabled: false
    state: stopped
    name: ssh.socket
  when: ansible_facts.services["ssh"]["source"] == "systemd" | default(false)
- name: "Enable ssh.service with systemd"
  ansible.builtin.systemd_service:
    enabled: true
    state: started
    name: ssh.socket
  when: ansible_facts.services["ssh"]["source"] == "systemd" | default(false)
- name: Include_role lihas_sysctl
  ansible.builtin.import_role:
    name: lihas_sysctl
  when: lihas_sysctl_done is not defined
- name: Collect systemd services to enable
  ansible.builtin.set_fact:
    systemd_service_enable: "{{ systemd_service_enable | default([]) + hostvars[inventory_hostname][item]['config']['systemd']['service']['enabled'] | default ([])  }}"
    cacheable: false
  when: hostvars[inventory_hostname][item]['config']['systemd'] is defined and hostvars[inventory_hostname][item]['config']['systemd']['service'] is defined
  loop: "{{ configspaces }}"
- name: "Enable systemd services"
  ansible.builtin.systemd_service:
    enabled: true
    state: started
    name: "{{ item }}"
  with_list: "{{ systemd_service_enable | default([]) }}"
