---
- name: mark role lihas_common done
  set_fact:
    role_done_lihas_common: true
  tags:
    - variables
- name: mark lihas_common done
  set_fact:
    lihas_common_done: true
  tags:
    - variables

- name: include variables
  include_role:
    name: lihas_variables
  when: configspaces is not defined
  tags:
    - variables
- name: reset_apt_update
  set_fact:
    apt_update: False
- name: "Set default locale to {{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
  lineinfile:
    dest: "/etc/default/locale"
    regexp: "LANG="
    line: "LANG={{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
  notify: reconfigure locales
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
- name: "Set to generate locales {{ locales_locales_to_be_generated | default(['de_DE.UTF-8', 'en_US.UTF-8']) }}"
  lineinfile:
    mode: 0644
    path: /etc/locale.gen
    line: '{{ item }} \2'
    regexp: "^(# |){{ item }} (.*)"
    backrefs: True
    state: present
  loop: "{{ locales_locales_to_be_generated | default(['de_DE.UTF-8', 'en_US.UTF-8']) }}"
  notify: reconfigure locales
  when: ansible_distribution == "Debian"or ansible_distribution == "Ubuntu"
- name: "Set tzdata area to {{ tzdata_areas | default('Europe') }}"
  debconf:
    name: tzdata
    question: "tzdata/Areas"
    vtype: select
    value: "{{ tzdata_areas | default('Europe') }}"
  notify: reconfigure tzdata
  when: ansible_distribution == "Debian"or ansible_distribution == "Ubuntu"
- name: "Set tzdata zone to {{ tzdata_zones_europe | default('Berlin') }}"
  debconf:
    name: tzdata
    question: "tzdata/Zones/Europe"
    vtype: select
    value: "{{ tzdata_zones_europe | default('Berlin') }}"
  notify: reconfigure tzdata
  when: ansible_distribution == "Debian"or ansible_distribution == "Ubuntu"
- name: deploy /etc/network/interfaces
  template:
    src: etc/network/interfaces.j2
    dest: /etc/network/interfaces
    mode: 0644
  when: hostvars[inventory_hostname].network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  register: result
  tags:
    - network
- name: protect /etc/network/interfaces on Proxmox/LXC
  copy:
    dest: /etc/network/.pve-ignore.interfaces
    src: /dev/null
    mode: 0644
  when: ansible_virtualization_type == 'lxc' and hostvars[inventory_hostname].network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  tags:
    - network
# /etc/hosts
- name: add lines to /etc/hosts
  include: tasks/10-etc_hosts.yml
  loop: "{{ configspaces }}"
  loop_control:
    loop_var: configgroup
  when: configspaces is defined
- name: remove 127.0.1.1 from /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: absent
    regexp: '^127\.0\.1\.1'
# repositories
- name: remove obsolete /etc/apt/sources.list.d/lihas.list
  file:
    state: absent
    path: /etc/apt/sources.list.d/lihas.list
  register: result
  when: ansible_distribution_release == "buster"
- name: set_apt_update
  set_fact:
    apt_update: True
  when: result.changed
- name: enable buster-backports
  template:
    src: etc/apt/sources.list.d/buster-backports.list
    dest: /etc/apt/sources.list.d/buster-backports.list
    mode: 0644
  register: result
  when: ansible_distribution_release == "buster"
- name: set_apt_update
  set_fact:
    apt_update: True
  when: result.changed
- name: backports get lower preference
  copy:
    src: etc/apt/preferences.d/buster_backports.pref
    dest: /etc/apt/preferences.d/buster_backports.pref
    mode: 0644
  register: result
  when: ansible_distribution_release == "buster"
- name: set_apt_update
  set_fact:
    apt_update: True
  when: result.changed
- name: create /etc/apt/preferences.d
  file:
    state: directory
    path: /etc/apt/preferences.d
    mode: 0755
- name: Update apt cache
  block:
    - apt:
        update_cache: True
  rescue:
    - shell:
        cmd: "rm -rf /var/lib/apt/lists/; LC_ALL=C apt-get update"
        warn: false
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
- name: if wireguard is used, use from backports
  copy:
    src: etc/apt/preferences.d/wireguard.pref
    dest: /etc/apt/preferences.d/wireguard.pref
    mode: 0644
  register: result
  when: ansible_distribution_release == "buster"
- name: set_apt_update
  set_fact:
    apt_update: True
  when: result.changed
- name: apt update
  apt:
    update_cache: True
  when: apt_update
- name: reset_apt_update
  set_fact:
    apt_update: False
  when: apt_update
- name: install software general
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - aptitude
    - etckeeper
    - fail2ban
    - locales
    - needrestart
    - rsync
    - screen
    - tzdata
    - vim
  loop_control:
    loop_var: item
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  async: 60
  poll: 1
- name: etc/needrestart/conf.d/90-needrestart-lxc.conf
  copy:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: 0644
  loop:
    - etc/needrestart/conf.d/90-needrestart-lxc.conf
  when: ansible_virtualization_type == 'lxc'
- name: install software buster/bullseye/Ubuntu only
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - extrepo
  loop_control:
    loop_var: item
  when: ansible_distribution_release == "buster" or ansible_distribution == "bullseye" or ansible_distribution == "Ubuntu"
- name: extrepo enable lihas
  command:
    cmd: /usr/bin/extrepo enable lihas
  changed_when: False
  register: result
  when: ansible_distribution_release == "buster" or ansible_distribution == "bullseye" or ansible_distribution == "Ubuntu"
- name: set_apt_update
  set_fact:
    apt_update: True
  when: '( ansible_distribution_release == "buster" or ansible_distribution == "bullseye" or ansible_distribution == "Ubuntu" ) and "repository already existed" not in result.stdout'
- name: apt update
  apt:
    update_cache: True
  when: apt_update and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
- name: reset_apt_update
  set_fact:
    apt_update: False
  when: apt_update and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
- name: Update apt cache
  apt:
    update_cache: True
    cache_valid_time: 600
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
- name: disable systemd-modules-load.service on lxc
  systemd:
    name: systemd-modules-load.service
    masked: true
  when: ansible_virtualization_type == 'lxc'
- name: disable systemd-journald-audit.socket on lxc
  systemd:
    name: systemd-journald-audit.socket
    masked: true
  when: ansible_virtualization_type == 'lxc'
- name: disable sys-kernel-config.mount on lxc
  systemd:
    name: sys-kernel-config.mount
    masked: true
  when: ansible_virtualization_type == 'lxc'
- name: disable sys-kernel-debug.mount on lxc
  systemd:
    name: sys-kernel-debug.mount
    masked: true
  when: ansible_virtualization_type == 'lxc'
- name: disable systemd-remount-fs.service on lxc
  systemd:
    name: systemd-remount-fs.service
    masked: true
  when: ansible_virtualization_type == 'lxc'
- name: mark role lihas_common done
  set_fact:
    role_done_lihas_common: true
  when: role_done_lihas_common is not defined

- name: find additional software packages
  set_fact:
    lihas_common_extra_packages: "{{ lihas_common_extra_packages | default([]) + hostvars[inventory_hostname][item]['config']['software']['debian'] | default([]) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['software']['debian'] is defined
- name: install additional software for this host/group
  apt:
    name: "{{ item }}"
    state: present
  loop: "{{ lihas_common_extra_packages }}"
  loop_control:
    loop_var: item
  when: ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" ) and lihas_common_extra_packages is defined
  async: 60
  poll: 1
- name: find addtional files/templates
  set_fact:
    lihas_common_extra_files: "{{ lihas_common_extra_files | default([]) + hostvars[inventory_hostname][item]['config']['files'] | default([]) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['files'] is defined
  tags:
    - templates
- name: "copy additional files/templates: create directories"
  file:
    path: "/{{ item | dirname() }}"
    state: directory
  loop: "{{ lihas_common_extra_files | default([]) }}"
  loop_control:
    loop_var: item
  when: lihas_common_extra_files is defined
  tags:
    - templates
- name: copy additional files/templates
  template:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: 0644
  loop: "{{ lihas_common_extra_files | default([]) }}"
  loop_control:
    loop_var: item
  when: lihas_common_extra_files is defined
  tags:
    - templates

- name: find addtional files/templates with permissions
  set_fact:
    lihas_common_extra_files_with_perms: "{{ hostvars[inventory_hostname][item]['config']['fileswithpermissions'] | default([]) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['fileswithpermissions'] is defined
  tags:
    - templatesperms
- name: "files: include tasks/10-files.yml"
  include: tasks/10-files.yml
  loop: "{{ lihas_common_extra_files_with_perms | default([]) }}"
  loop_control:
    loop_var: filegroup
    index_var: filegroupid
  tags:
    - templatesperms

# create groups
- name: "groups: find groups"
  set_fact:
    lihas_common_groups: "{{ lihas_common_groups | default({}) | combine(hostvars[inventory_hostname][item]['config']['groups'] | default({}), recursive=True) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['groups'] is defined
  tags:
    - groups
- name: "groups: include tasks/10-groups.yml"
  include: tasks/10-groups.yml
  loop: "{{ lihas_common_groups | default({}) | flatten(levels=1) }}"
  loop_control:
    loop_var: group
  tags:
    - groups

# create users
- name: "users: find users"
  set_fact:
    lihas_common_users: "{{ lihas_common_users | default({}) | combine(hostvars[inventory_hostname][item]['config']['users'] | default({}), recursive=True) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['users'] is defined
  tags:
    - users
- name: "users: include tasks/10-users.yml"
  include: tasks/10-users.yml
  loop: "{{ lihas_common_users | default({}) | flatten(levels=1) }}"
  loop_control:
    loop_var: user
  tags:
    - users

- name: include lihas_sysctl
  include_role:
    name: lihas_sysctl
  when: lihas_sysctl_done is not defined

