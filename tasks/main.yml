---
- name: Mark role lihas_common done
  ansible.builtin.set_fact:
    role_done_lihas_common: true
  tags:
    - always
    - variables
- name: Mark lihas_common done
  ansible.builtin.set_fact:
    lihas_common_done: true
    cacheable: false
  tags:
    - always
    - variables
- name: Lihas_become init
  ansible.builtin.set_fact:
    lihas_become: false
  tags:
    - always
- name: Check if become is necessary
  ansible.builtin.set_fact:
    lihas_become: true
  when: ansible_effective_user_id != 0
  tags:
    - always
- name: "DEBUG: lihas_become"
  ansible.builtin.debug:
    var: lihas_become
    verbosity: 1
  tags:
    - always
- name: "DEBUG: ansible_effective_user_id"
  ansible.builtin.debug:
    var: ansible_effective_user_id
    verbosity: 1
  tags:
    - always
- name: Include variables
  ansible.builtin.import_role:
    name: lihas_variables
  when: configspaces is not defined
  tags:
    - always
    - variables
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: "Set default locale to {{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
  ansible.builtin.lineinfile:
    dest: "/etc/default/locale"
    regexp: "LANG="
    line: "LANG={{ locales_default_environment_locale | default('de_DE.UTF-8') }}"
  notify: Reconfigure locales
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set to generate locales {{ locales_locales_to_be_generated | default(['de_DE.UTF-8', 'en_US.UTF-8']) }}"
  ansible.builtin.lineinfile:
    mode: "0644"
    path: /etc/locale.gen
    line: '{{ item }} \2'
    regexp: "^(# |){{ item }} (.*)"
    backrefs: true
    state: present
  loop: "{{ locales_locales_to_be_generated | default(['de_DE.UTF-8', 'en_US.UTF-8']) }}"
  notify: Reconfigure locales
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set tzdata area to {{ tzdata_areas | default('Europe') }}"
  ansible.builtin.debconf:
    name: tzdata
    question: "tzdata/Areas"
    vtype: select
    value: "{{ tzdata_areas | default('Europe') }}"
  notify: Reconfigure tzdata
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: "Set tzdata zone to {{ tzdata_zones_europe | default('Berlin') }}"
  ansible.builtin.debconf:
    name: tzdata
    question: "tzdata/Zones/Europe"
    vtype: select
    value: "{{ tzdata_zones_europe | default('Berlin') }}"
  notify: Reconfigure tzdata
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"

- name: Collect network entries from LIHASVARS
  ansible.builtin.set_fact:
    network: "{{ network | default({}) | combine( LIHASVARS.network | default({}), recursive=true, list_merge='append_rp' ) }}"
  when: LIHASVARS.network is defined
  tags:
    - network
- name: Collect network entries from configspaces
  ansible.builtin.set_fact:
    network: "{{ network | default({}) | combine( hostvars[inventory_hostname][item]['config']['network'], recursive=true, list_merge='append_rp' ) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['network'] is defined
  tags:
    - network
- name: DEBUG network after %.config.network
  ansible.builtin.debug:
    var: hostvars
    verbosity: 2
- name: Deploy /etc/network/interfaces
  ansible.builtin.template:
    src: etc/network/interfaces.j2
    dest: /etc/network/interfaces
    mode: "0644"
  when: network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  register: result
  tags:
    - network
  become: "{{ lihas_become }}"
- name: Protect /etc/network/interfaces on Proxmox/LXC
  ansible.builtin.copy:
    dest: /etc/network/.pve-ignore.interfaces
    src: /dev/null
    mode: "0644"
  when: ansible_virtualization_type == 'lxc' and network.interfaces is defined and ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" )
  tags:
    - network
  become: "{{ lihas_become }}"
# /etc/hosts
- name: Add lines to /etc/hosts
  ansible.builtin.include_tasks: tasks/10-etc_hosts.yml
  loop: "{{ configspaces }}"
  loop_control:
    loop_var: configgroup
  when: configspaces is defined
- name: Remove 127.0.1.1 from /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: absent
    regexp: '^127\.0\.1\.1'
  become: "{{ lihas_become }}"
# repositories
- name: Remove obsolete /etc/apt/sources.list.d/lihas.list
  ansible.builtin.file:
    state: absent
    path: /etc/apt/sources.list.d/lihas.list
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact:
    apt_update: true
  when: result.changed
- name: Enable buster-backports
  ansible.builtin.template:
    src: etc/apt/sources.list.d/buster-backports.list
    dest: /etc/apt/sources.list.d/buster-backports.list
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact:
    apt_update: true
  when: result.changed
- name: Backports get lower preference
  ansible.builtin.copy:
    src: etc/apt/preferences.d/buster_backports.pref
    dest: /etc/apt/preferences.d/buster_backports.pref
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact:
    apt_update: true
  when: result.changed
- name: Create /etc/apt/preferences.d
  ansible.builtin.file:
    state: directory
    path: /etc/apt/preferences.d
    mode: "0755"
  become: "{{ lihas_become }}"
- name: Fix potential previous errors by creating /var/lib/apt/lists
  ansible.builtin.file:
    path: "/var/lib/apt/lists"
    state: directory
    mode: "0755"
- name: Update apt cache
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
  block:
    - name: Run apt update
      ansible.builtin.apt:
        update_cache: true
  rescue:
    - name: Rescue apt update, rm /var/lib/apt/lists
      ansible.builtin.file:
        path: "/var/lib/apt/lists"
        state: absent
    - name: Rescue apt update, create /var/lib/apt/lists
      ansible.builtin.file:
        path: "/var/lib/apt/lists"
        state: directory
        mode: "0755"
    - name: Rescue apt update, run apt update
      ansible.builtin.apt:
        update_cache: true
- name: If wireguard is used, use from backports
  ansible.builtin.copy:
    src: etc/apt/preferences.d/wireguard.pref
    dest: /etc/apt/preferences.d/wireguard.pref
    mode: "0644"
  register: result
  when: ansible_distribution_release == "buster"
  become: "{{ lihas_become }}"
- name: Set_apt_update
  ansible.builtin.set_fact:
    apt_update: true
  when: result.changed
- name: Apt update
  ansible.builtin.apt:
    update_cache: true
  when: apt_update | default(false)
  become: "{{ lihas_become }}"
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: Install software general
  ansible.builtin.apt:
    state: present
    name: ['aptitude', 'etckeeper', 'fail2ban', 'locales', 'needrestart', 'rsync', 'screen', 'tzdata', 'vim']
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
  tags:
    - software
- name: File etc/needrestart/conf.d/90-needrestart-lxc.conf
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: "0644"
  loop:
    - etc/needrestart/conf.d/90-needrestart-lxc.conf
  when: ansible_virtualization_type == 'lxc'
  become: "{{ lihas_become }}"
- name: Install software buster/bullseye only
  ansible.builtin.apt:
    name:
      - extrepo
    state: present
  when: ansible_distribution_release == "buster" or ansible_distribution_release == "bullseye"
  tags:
    - extrepo
    - software
  become: "{{ lihas_become }}"
- name: Extrepo enable lihas check presence
  ansible.builtin.stat:
    path: "{{ '/etc/apt/sources.list.d/extrepo_lihas.sources' }}"
  register: statresult
  become: "{{ lihas_become | default(no) }}"
- name: Extrepo enable lihas
  ansible.builtin.command:
    cmd: /usr/bin/extrepo enable lihas
  when: ( not statresult.stat.exists ) and ( ansible_distribution_release == "buster" or ansible_distribution_release == "bullseye" )
  changed_when: true
  tags:
    - extrepo
  become: "{{ lihas_become }}"
- name: Extrepo Repositories to enable
  ansible.builtin.set_fact:
    lihas_extrepo: "{{ lihas_extrepo | default([]) + hostvars[inventory_hostname][item]['config']['extrepo'] }}"
    cacheable: false
  with_list: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['extrepo'] is defined
  tags:
    - extrepo
  become: "{{ lihas_become }}"
- name: Debug lihas_extrepo
  ansible.builtin.debug:
    var: lihas_extrepo
    verbosity: 1
  tags:
    - extrepo
  become: "{{ lihas_become }}"
- name: Extrepo enable extra Repositories
  ansible.builtin.command:
    cmd: /usr/bin/extrepo enable {{ item }}
  changed_when: false
  register: resultloop
  with_list: "{{ lihas_extrepo }}"
  when: lihas_extrepo is defined
  tags:
    - extrepo
  become: "{{ lihas_become }}"
- name: Debug resultloop
  ansible.builtin.debug:
    var: resultloop
    verbosity: 1
  tags:
    - extrepo
- name: Set_apt_update
  ansible.builtin.set_fact:
    apt_update: true
#  when: '( ansible_distribution_release == "buster" or ansible_distribution_release == "bullseye" ) and "repository already existed" not in result.stdout'
  tags:
    - extrepo
- name: Apt update
  ansible.builtin.apt:
    update_cache: true
  when: apt_update | default (false)
  become: "{{ lihas_become }}"
- name: Reset_apt_update
  ansible.builtin.set_fact:
    apt_update: false
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 600
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  become: "{{ lihas_become }}"
- name: Disable systemd-modules-load.service on lxc
  ansible.builtin.systemd:
    name: systemd-modules-load.service
    masked: true
  when: ansible_virtualization_type == 'lxc' and ansible_service_mgr == 'systemd'
  become: "{{ lihas_become }}"
- name: Disable systemd-journald-audit.socket on lxc
  ansible.builtin.systemd:
    name: systemd-journald-audit.socket
    masked: true
  when: ansible_virtualization_type == 'lxc' and ansible_service_mgr == 'systemd'
  become: "{{ lihas_become }}"
- name: Disable sys-kernel-config.mount on lxc
  ansible.builtin.systemd:
    name: sys-kernel-config.mount
    masked: true
  when: ansible_virtualization_type == 'lxc' and ansible_service_mgr == 'systemd'
  become: "{{ lihas_become }}"
- name: Disable sys-kernel-debug.mount on lxc
  ansible.builtin.systemd:
    name: sys-kernel-debug.mount
    masked: true
  when: ansible_virtualization_type == 'lxc' and ansible_service_mgr == 'systemd'
  become: "{{ lihas_become }}"
- name: Disable systemd-remount-fs.service on lxc
  ansible.builtin.systemd:
    name: systemd-remount-fs.service
    masked: true
  when: ansible_virtualization_type == 'lxc' and ansible_service_mgr == 'systemd'
  become: "{{ lihas_become }}"
- name: Mark role lihas_common done
  ansible.builtin.set_fact:
    role_done_lihas_common: true
  when: role_done_lihas_common is not defined

- name: "Service lihas-routes: collect"
  ansible.builtin.set_fact:
    lihas_routes: "{{ lihas_routes | default({}) | combine(hostvars[inventory_hostname][item]['config']['routes'], recursive=true, list_merge='append_rp') }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['routes'] is defined
  tags:
    - routes
- name: "Service lihas-routes: template"
  ansible.builtin.template:
    src: "etc/systemd/system/routing-lihas.service"
    dest: "/etc/systemd/system/routing-lihas.service"
    mode: "0644"
  when: lihas_routes is defined
  notify: Restart routing-lihas
  register: systemd
  tags:
    - routes
  become: "{{ lihas_become }}"
- name: "Service lihas-routes: reload_systemd"
  ansible.builtin.systemd:
    daemon_reload: true
  when: lihas_routes is defined and systemd.changed
  tags:
    - routes
  become: "{{ lihas_become }}"
- name: "Service lihas-routes: service"
  ansible.builtin.service:
    name: routing-lihas
    enabled: true
  when: lihas_routes is defined
  tags:
    - routes
  become: "{{ lihas_become }}"


- name: Find additional software packages
  ansible.builtin.set_fact:
    lihas_common_extra_packages: >-
      {{ lihas_common_extra_packages | default([]) +
      hostvars[inventory_hostname][item]['config']['software']['debian'] | default([]) }}
  loop: "{{ configspaces }}"
- name: "DEBUG: additional software packages"
  ansible.builtin.debug:
    var: lihas_common_extra_packages
    verbosity: 1
- name: Install additional software for this host/group
  ansible.builtin.apt:
    name: "{{ lihas_common_extra_packages }}"
    state: present
  when: ( ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" ) and lihas_common_extra_packages is defined
  become: "{{ lihas_become }}"
  tags:
    - software
- name: Find addtional files/templates
  ansible.builtin.set_fact:
    lihas_common_extra_files: "{{ lihas_common_extra_files | default([]) + hostvars[inventory_hostname][item]['config']['files'] | default([]) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['files'] is defined
  tags:
    - templates
- name: "Copy additional files/templates: create directories"
  ansible.builtin.file:
    path: "/{{ item | dirname() }}"
    state: directory
    mode: "0755"
  loop: "{{ lihas_common_extra_files | default([]) }}"
  loop_control:
    loop_var: item
  when: lihas_common_extra_files is defined
  tags:
    - templates
  become: "{{ lihas_become }}"
- name: Copy additional files/templates
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: "0644"
  loop: "{{ lihas_common_extra_files | default([]) }}"
  loop_control:
    loop_var: item
  when: lihas_common_extra_files is defined
  tags:
    - templates
  become: "{{ lihas_become }}"

- name: Find addtional files/templates with permissions
  ansible.builtin.set_fact:
    lihas_common_extra_files_with_perms: >-
      "{{ lihas_common_extra_files_with_perms | default([]) +
      hostvars[inventory_hostname][item]['config']['fileswithpermissions'] | default([]) }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['fileswithpermissions'] is defined
  tags:
    - templatesperms
- name: "Files: include tasks/10-files.yml"
  ansible.builtin.include_tasks: tasks/10-files.yml
  loop: "{{ lihas_common_extra_files_with_perms | default([]) }}"
  loop_control:
    loop_var: filegroup
    index_var: filegroupid
  tags:
    - templatesperms

# create groups
- name: "Groups: find groups"
  ansible.builtin.set_fact:
    lihas_common_groups: >-
      "{{ lihas_common_groups | default({}) | combine(hostvars[inventory_hostname][item]['config']['groups'] |
      default({}), recursive=true, list_merge='append_rp') }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['groups'] is defined
  tags:
    - groups
- name: "Debug groups"
  ansible.builtin.debug:
    var: lihas_common_groups
    verbosity: 1
  tags:
    - groups
- name: "Groups: include tasks/10-groups.yml"
  ansible.builtin.include_tasks: tasks/10-groups.yml
  loop: "{{ lihas_common_groups | default({}) | flatten(levels=1) }}"
  loop_control:
    loop_var: group
  tags:
    - groups

# create users
- name: "Users: find users"
  ansible.builtin.set_fact:
    lihas_common_users: >-
      "{{ lihas_common_users | default({}) | combine(hostvars[inventory_hostname][item]['config']['users']
      | default({}), recursive=true, list_merge='append_rp') }}"
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['users'] is defined
  tags:
    - users
- name: "Users: include tasks/10-users.yml"
  ansible.builtin.include_tasks: tasks/10-users.yml
  loop: "{{ lihas_common_users | default({}) | flatten(levels=1) }}"
  loop_control:
    loop_var: user
  tags:
    - users

- name: "Populate service facts"
  ansible.builtin.service_facts:

# ssh socket -> service
- name: "Disable ssh.socket with systemd"
  ansible.builtin.systemd_service:
    enabled: false
    state: stopped
    name: ssh.socket
  when: ansible_facts.services["ssh"]["source"] == "systemd"
- name: "Enable ssh.service with systemd"
  ansible.builtin.systemd_service:
    enabled: true
    state: started
    name: ssh.socket
  when: ansible_facts.services["ssh"]["source"] == "systemd"

- name: Include_role lihas_sysctl
  ansible.builtin.import_role:
    name: lihas_sysctl
  when: lihas_sysctl_done is not defined
